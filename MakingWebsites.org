#+TITLE: Making Websites for Beginners
#+AUTHOR: Clarissa Littler
#+OPTIONS: H:2 toc:nil
#+LaTeX_HEADER: \usepackage{minted}
#+startup: beamer
#+BEAMER_THEME: Madrid
#+LaTeX_CLASS: beamer

* What is this class?
** What we'll cover
   + The basic technology that goes into a webpage \pause
   + Simple examples of how to use HTML, CSS, and JavaScript \pause
   + Resources to continue your learning
** What we won't cover
   + How to build the back-end of a site \pause
   + How to program in JavaScript in general \pause
     + Though there are free supplements for that \pause
   + A majority of CSS and HTML
* What is a website?
** Client and server
*** 
   Two pieces that talk to each other to make a site
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
**** Server
     + Sends data to the browser
     + Saves information for long term use
     + Receives requests from the client
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
**** Client
     + Receives data from the server
     + Renders server data into a usable page
     + Handles the user interface
** The three pieces of a web page
   + HTML \pause
   + CSS \pause
   + JavaScript
** HTML
*** What does HTML do?
    HTML describes the content of the page, but not how it looks
** CSS
*** What does CSS do?
    CSS describes how a page looks, but not its content
** JavaScript
*** What does JavaScript do?
    The dynamics and the user interface of the page
* Basic HTML
** What *is* HTML
*** HyperText Markup Language
    + HyperText \pause
    + Markup
** Tags and Elements
*** 
#+BEGIN_SRC html :exports code
  <body>
    <h1>This is a headline</h1>
    <p>This is a paragraph of text, 
        where some of the text is <b>bold</b>, and
        after this paragraph, there will be a numbered list
    </p>

    <ol>
      <li>lists are made of "list items"</li>
      <li>like these</li>
    </ol>
  </body>
#+END_SRC
** Whence closing tags
*** Without closing tags
#+BEGIN_SRC html :exports code
  <body>
    <ol>
      <li>This is a list
      <li>but
      <li> there's ambiguity here
    <ol>
      <li> where does this part go?
      <li> is it a sublist or a second list?
      
#+END_SRC
** Whence closing tags
*** With closing tags
#+BEGIN_SRC html :exports code 
  <body>
    <ol>
      <li>This is a list</li>
      <li>but</li>
      <li> there's ambiguity here</li>
    </ol>
    <ol>
      <li> where does this part go?</li>
      <li> is it a sublist or a second list?</li>
    </ol>
  </body>
#+END_SRC
** The basic template
*** 
#+BEGIN_SRC html :exports code
  <!doctype html>
  <html>
    <head>
      ...
    </head>
    <body>
      ...
    </body>
  </html>
#+END_SRC
** Semantic markup
*** Markup is about meaning
    Tags should be used with intended /meaning/ in mind
** Semantic markup
*** 
#+BEGIN_SRC html :exports code
  <!doctype html>

  <html>
    <body>
      Here we have 
      <b>some bold text</b> 
      and some 
      <strong>strong text</strong>. 
      They look identical by default.
    </body>
  </html>
#+END_SRC
** Semantic markup
*** 
#+ATTR_LATEX: :width 5cm
file:strongB.png
** Semantic markup
   + =<strong>= vs. =<b>= \pause
   + =<em>= vs. =<i>= \pause
   + =<article>= \pause
   + =<section>=
** Exercise 1
*** 
#+LaTeX: {\Large {\scshape
Make your own page following the template below: use at least two of the following tags =<ol>=, =<ul>=, =<h1>=, =<p>=, =<b>=, and =<i>=
#+LaTeX: }}
*** 
#+BEGIN_SRC html :exports code
  <!doctype html>
  <html>
    <body>
      your code here
    </body>
  </html>
#+END_SRC
** Headlines
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
**** 
#+BEGIN_SRC html :exports code 
  <!doctype html>
  <html>
    <body>
      <h1>Big headline</h1>
      <h2>Smaller</h2>
      <h3>Smaller</h3>
      <h4>Even smaller</h4>
      <h5>Smallller</h5>
      <h6>Smallest</h6>
    </body>
  </html>
#+END_SRC
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
**** 
file:headlines.png
** Lists
*** 
#+BEGIN_SRC html :exports code
  <!doctype html>
  <html>
    <body>
      <ol>
        <li>This is an ordered list</li>
        <li>And here we have a nested list
          <ul>
            <li>and this is an unordered list</li>
            <li>which is by default</li>
            <li>a bulleted list</li>
          </ul>
        </li>
      </ol>
    </body>
  </html>
#+END_SRC
** Lists
*** 
#+ATTR_LATEX: :width 5cm
file:listylists.png
** Anchors and Attributes
*** 
~<a href="https://multcolib.org">This is a link</a>~
** Exercise 2
*** 
#+LaTeX: {\Large {\scshape
Create your own page that uses at least two links and test them to ensure they work
#+LaTeX: }}
** Inline and Block Elements
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
**** Inline
Elements that don't take up space beyond their text
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
**** Block
Elements that take up room beyond their text
** Div and span
*** Semantic markup
  Div and span are used to group related elements together
* CSS
** Cascading Style Sheets
*** What is CSS?
    Cascading style sheets control the appearance of elements
** CSS Entries
*** 
#+BEGIN_SRC css :exports code
  selector {
      property: value;
      property: value;
      property: value;
  }
#+END_SRC
** Adding CSS to a page
*** Style tags
#+BEGIN_SRC html :exports code
  <!doctyle html>
  <html>
    <head>
      <style>
        ...
      </style>
    </head>
    <body>
      ...
    </body>
  </html>
#+END_SRC
** Selecting elements by ID
*** 
#+BEGIN_SRC html :exports code
  <!doctype html>

  <html>
    <head>
      <style>
        #para {
          color: blue;
        }
      </style>
    </head>
    <body>
      <p id="para">This is the text within our paragraph.</p>
    </body>
  </html>
#+END_SRC
** Selecting elements by ID 
*** 
#+ATTR_LATEX: :width 5cm
file:byId.png

** Selecting elements by class
*** 
#+BEGIN_SRC css :exports code
  .ourClass {
      color: red;
      width: 200px;
      font-weight: bold;
  }
#+END_SRC
** Exercise 3
*** 
#+LaTeX: {\Large
Open the file =exer3.html= and then add in CSS declarations to make both paragraphs have =width: 200px= and the first paragraph have a color of =blue=
#+LaTeX: }
#+BEGIN_SRC html :exports none :tangle exer3.html
  <!doctype html>
  <html>
    <head>
    </head>
    <body>
      <p class="theClass" id="firstPara">This is a paragraph that has some text in it and, y'know, stuff and things</p>
      <p class="theClass" id="sndPara">This is the second paragraph by gum</p>
    </body>
  </html>
#+END_SRC
** Selecting elements by class
*** 
#+BEGIN_SRC html :exports code
  <p class="ourClass">Here's the 
  text in one paragraph. 
  There's going to be a fair 
  decent length of text here so we 
  can see that the width 
  restriction causes the text to wrap around.</p>

  <ol class="ourClass">
    <li>Here's a list here that's 
    also going to have an item 
    with at least a moderately long 
    single element 
    in order to show the 
    effects of the width property</li>
  </ol>
#+END_SRC
** Selecting elements by class
*** 
#+ATTR_LATEX: :width 5cm
file:byClass.png
** Selecting elements by type
*** 
#+BEGIN_SRC css :exports code
  p {
      font-size: large;
      background-color: green;
      color: blue;
      width: 200px;
  }
#+END_SRC
** Selecting elements by type
*** 
#+BEGIN_SRC html :exports code
  <p>Our first paragraph is here. 
    There's some text and things of that ilk.</p>
  <p>This is our second paragraph, 
    beholden to no one but itself. 
    A wild rebel of a paragraph</p>
  <p>Our third paragraph lies here, 
    relentless in its comformity. 
    There's not much to say about ol' thirdy, 
    they're simply stoic and 
    resolute in their paragraphness.</p>
#+END_SRC
** Selecting elements by type
*** 
#+ATTR_LATEX: :width 5cm
file:byType.png
** Specificity							   :noexport:
*** 
#+BEGIN_SRC css :exports code
  p {
      font-size: large;
      background-color: green;
      color: blue;
      width: 200px;
  }
  p.rebel {
      width: 300px;
      background-color: white;
  }
#+END_SRC
** Specificity							   :noexport:
*** 
#+BEGIN_SRC html
  <h1 class="rebel">This time we also have a rebellious headline, 
  which should be unchanged</h1>
  
  <p>Our first paragraph is here.
    There's some text and things of that ilk.</p>
  <p class="rebel">This is our second paragraph, 
    beholden to no one but itself. 
    A wild rebel of a paragraph</p>
  <p>Our third paragraph lies here,
    relentless in its comformity. 
    There's not much to say about ol' thirdy, 
    they're simply stoic and resolute
    in their paragraphness.</p>
  </div>
#+END_SRC
** Specificity							   :noexport:
*** 
#+ATTR_LATEX: :width 11cm
file:specific.png
** Another example with divs
*** 
#+BEGIN_SRC css :exports code
  .character1 {
    color: crimson;
    text-align: left;
  }
  .character2 {
    color: darkgreen;
    text-align: right;
  }
  .description {
    font-weight: bold;
    text-align: center;
  }
  .script {
    width: 700px;
  }
#+END_SRC
** Another example with divs
*** 
#+BEGIN_SRC html :exports code
    <div class="script">
      <p class="description">
        Our scene begins with two chickens, 
	discussing existence.
      </p>
      <p class="character1">
        Chicken 1: Who am I and why do I want to cross the road?
      </p>
      <p class="character2">
        Chicken 2: Verily, you want to cross the road 
	to get to the other side.
      </p>
      <p class="description">
        Thus ends our reinterpretation of Waiting for Godot
      </p>
    </div>
#+END_SRC
** Another example with divs
*** 
#+ATTR_LATEX: :width 11cm
file:screenplay.png
* JavaScript
** What is JavaScript?
*** 
JavaScript is a programming language that runs in the browser and provides the dynamics, the interaction in any web site
** Programming is speaking a language
   + All language is communication \pause
   + Programming languages are special languages \pause
   + Computers need precision \pause they're not as smart as us
** Why programming is hard
*** 
    The precision of instructions computers need is unnatural for the human mind
** Why programming is hard
*** 
#+ATTR_LATEX: :width 5cm
[[file:ikea-instructions.jpg][file:~/projects/games-with-js/ikea-instructions.jpg]]
** Why programming is hard
*** 
#+ATTR_LATEX: :width 5cm
[[file:EmpireStateSection.gif][file:~/projects/games-with-js/EmpireStateSection.png]]
** Why programming is learnable
   + Precise thinking may be unnatural \pause
   + But it's not impossible \pause
   + It takes time \pause and practice \pause
   + Like learning any language
** The JavaScript console
   + Every browser can run JavaScript \pause
   + The =console= allows you to test code
** The JavaScript console
*** 
#+LaTeX: {\Huge
Let's try it!
#+LaTeX: }

** Syntax
   + Syntax is the grammar of a language \pause
   + Even stricter rules than human languages \pause
   + "Dog not can to ridebike nor can to cook" \pause
   + Computers can't guess
** Evaluation of code
   + Syntax doesn't *do* anything \pause
   + Saying "I have a trillion dollars" doesn't make it so \pause
   + An /interpreter/ runs (or /evaluates/) code
** Arithmetic
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
**** Numbers
     + 1
     + 0.5
     + -20
     + $\ldots$
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
**** Operations
     + =+=
     + =-=
     + =*=
     + $\ldots$
** Sequences
   + Need to do more than a single step of code at a time \pause
   + List the steps line by line \pause separate by semicolons
** Variables
*** I have a friend, let's call her "Cassandra"...
Variables function both as storage containers and pronouns
** Creating Variables
*** 
#+BEGIN_SRC js :exports code
  var nameOfVariable = initialValueInIt;
  var numberOfToes = 10;
#+END_SRC
** Assigning variables
*** 
#+BEGIN_SRC js :exports code
  var musicalsThatShouldExist = "The Walking Dead on Ice";
  musicalsThatShouldExist = "Werner Herzog Sings The Blues";
#+END_SRC
** Functions 
*** Functions in math
#+BEGIN_LaTeX
\begin{align*}
  f(x) &= x + 10
\end{align*}
#+END_LaTeX
** Functions
*** Functions in JavaScript
#+BEGIN_SRC js :exports code
  function f(x) {
      return x + 10;
  }
#+END_SRC
** Using functions
*** 
First example of a function, a function that writes data to the console
*** 
#+BEGIN_CENTER
  =console.log=
#+END_CENTER
** Multi-argument functions
*** 
#+BEGIN_SRC js :exports code
  function moreFun (anArgument,anotherArgument) {
      console.log(anArgument + anotherArgument);
  }

  moreFun(10, 20);
#+END_SRC
** Functions with no arguments
*** 
#+BEGIN_SRC js :exports code
  function noArgs () {
      return 10;
  }
#+END_SRC

** Objects
   + Phone books \pause
   + Contact lists \pause
   + Mall directories \pause
   + Dictionaries
** Making Objects
*** 
#+BEGIN_SRC js :exports code
  var obj = {prop1 : 0, prop2 : 1};
  var otherObject = {};
#+END_SRC
** Objects
*** 
#+BEGIN_SRC js :exports code
  var obj = {prop1 : 0, prop2 : 1, prop3 : "thing"};
#+END_SRC
** Objects
*** 
#+BEGIN_SRC js :exports code
  var obj = {};
  obj.numberOfChickens = 2;
#+END_SRC
* The Document Object Model
** What is the Document Object Model?
*** The DOM
    The document object model (DOM) is the representation of the web page /as JavaScript objects/
** Putting the document in DOM
*** 
=document= is the object that holds most of the important methods 

* Programming the Document Object Model
** When to load code
#+BEGIN_SRC js :exports code 
    window.onload = function () {
        ... 
    };
#+END_SRC
** Creating elements in code
   \pause
   + =document.createElement= \pause
   + =document.createTextNode= \pause
   + =document.body= \pause
   + =*element*.appendChild=
** Creating elements
   #+BEGIN_SRC html :exports code
     <!doctype html>
     <html>
       <head>
         <script>
           window.onload = function () {
              var newHeadline = document.createElement("h1");
              var textNode = document
                .createTextNode("This is a headline!");
              newHeadline.appendChild(textNode);
              document.body.appendChild(newHeadline);
           };
         </script>
       </head>
       <body>
       </body>
     </html>
   #+END_SRC
** Finding elements
   \pause
   + =document.getElementById= \pause
   + =document.getElementsByTagName= \pause
   + =*element*.firstChild= \pause
   + =*node*.nodeValue=
** getElementById
#+BEGIN_SRC html :exports code
    <body>
      <ol id="list1">
        <li>This is a list</li>
      </ol>
      <ol id="list2">
        <li>This is our second list</li>
      </ol>
    </body>
#+END_SRC
** getElementById
#+BEGIN_SRC js :exports code
  window.onload = function () {
      var newItem = 
        document.createElement("li");
      var newText =
          document
          .createTextNode("item in the second list");
      newItem.appendChild(newText);
      var secondList = document.getElementById("list2");
      secondList.appendChild(newItem);
  };
#+END_SRC

** Changing CSS properties
*** 
#+BEGIN_SRC html :exports code
  <!doctype html>
  <html>
    <head>
      <script>
        window.onload = function () {
	  var h = document.getElementById("headline");
	  h.style.color = "red";
        }
      </script>
    </head>
    <body>
      <h1 id="headline">This is a headline!</h1>
    </body>
  </html>
#+END_SRC

* Wrapup
** What we've learned
   + What a webpage is \pause
     + HTML \pause
     + CSS \pause
     + JavaScript \pause
** What we've learned
   + HTML \pause
     + Elements \pause
     + Tags \pause
     + Semantic markup
     + Content, not appearance
** What we've learned
   + CSS \pause
     + Style, not substance \pause
     + Selectors \pause
     + Classes
** What we've learned
   + JavaScript \pause
     + A general purpose programming language \pause
     + Can be run by every browser \pause
     + Connects to HTML via Document Object Model
** What to learn next
   + More HTML tags \pause
   + So much more CSS \pause
   + Frameworks for styling \pause
     + Bootstrap is a very popular one \pause
   + JavaScript programming
** Thanks for attending!
*** 
#+LaTeX: {\Huge
Thanks for being in this class
#+LaTeX: }
